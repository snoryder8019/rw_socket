<script>
    document.addEventListener("DOMContentLoaded", function () {
  let spriteImagesCache = {}; // Cache for dominoes sprite images
  let spritesMap = {}; // Store dominoes sprites by _id
  let gameElements = []; // Store game elements
  let gameElementsCache = {}; // Cache for game elements
  let dealingAnimationActive = true;
  let ctx; // Canvas context
  window.ctx = ctx;

  console.log("DOM loaded, initializing game logic...");

  // Ensure extractGameSettingsData is defined before it is used
  function extractGameSettingsData(cardTableGameDiv) {
    const gameSettings = cardTableGameDiv.getAttribute('data-game-settings');
    if (gameSettings) {
      console.log("Extracting game settings data:", gameSettings);
      return JSON.parse(gameSettings);
    } else {
      console.error('No gameSettingsData found on the cardTableGameDiv');
      return null;
    }
  }
  window.extractGameSettingsData = extractGameSettingsData;

  // Initialize canvas context when available
  function initializeCanvasContext() {
    const canvas = document.querySelector('canvas');
    if (canvas) {
      ctx = canvas.getContext('2d');
      window.ctx = ctx;
      console.log("Canvas context initialized.");
    } else {
      console.error("Canvas not found.");
    }
  }
  window.initializeCanvasContext = initializeCanvasContext;

  // Fetch sprite images using spriteIds and cache them
// Fetch sprite images using spriteIds and cache their coordinates and size
async function fetchSprites(spriteIds) {
  console.log("Fetching sprites with sprite IDs:", spriteIds);
  try {
    const response = await fetch('/games/gameSprites/allData'); // Fetch sprites from API
    const sprites = await response.json();
    console.log("Sprites fetched:", sprites);

    // Cache the sprite sheet
    sprites.forEach(sprite => {
      if (spriteIds.includes(sprite._id) && sprite.imageSrc) {
        spritesMap[sprite._id] = {
          imageSrc: sprite.imageSrc,
        };
      }
    });
  } catch (error) {
    console.error('Error fetching sprites:', error);
  }
}

// Fetch game elements and cache them, including their dynamic sourceCoord and static sourceCoords
async function fetchGameElements() {
  if (Object.keys(gameElementsCache).length > 0) {
    console.log("Fetching game elements from cache");
    return Object.values(gameElementsCache);
  }

  console.log("Fetching game elements from server...");
  try {
    const response = await fetch('/games/gameElements/allData'); // Fetch game elements from the server
    const elements = await response.json();
    console.log("Game elements fetched:", elements);

    // Cache the game elements by their _id
    elements.forEach(element => {
      gameElementsCache[element._id] = element;
    });

    return elements;
  } catch (error) {
    console.error('Error fetching game elements:', error);
    return [];
  }
}

// Preload the sprite sheets
async function preloadImages() {
  console.log("Preloading sprite sheet images...");
  const promises = Object.values(spritesMap).map(sprite => {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.src = sprite.imageSrc;

      img.onload = () => {
        spriteImagesCache[sprite.imageSrc] = img; // Cache the entire sprite sheet
        console.log(`Sprite sheet loaded for imageSrc: ${sprite.imageSrc}`);
        resolve();
      };

      img.onerror = () => {
        console.error(`Failed to load sprite sheet for imageSrc: ${sprite.imageSrc}`);
        reject();
      };
    });
  });

  await Promise.all(promises); // Wait for all images to load
  console.log("All sprite sheet images preloaded.");
}

// Render a specific game element from the sprite sheet using sourceCoord for positioning and sourceCoords for extracting the sprite frame
function renderGameElement(ctx, gameElement) {
  console.log(`Rendering game element: ${gameElement.name}`);

  // Retrieve the sprite sheet image from cache
  const sprite = spritesMap[gameElement.spriteId];
  const img = spriteImagesCache[sprite.imageSrc];

  if (img) {
    // sourceCoords define the frame of the sprite in the sheet
    const [srcX, srcY, srcWidth, srcHeight] = gameElement.sourceCoords;
    // sourceCoord defines the placement of the element on the canvas (can be dynamically updated)
    const [destX, destY, destWidth, destHeight] = gameElement.sourceCoord;

    // Draw the parsed portion of the sprite sheet onto the canvas
    ctx.drawImage(img, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight);
    console.log(`Game element ${gameElement.name} rendered at (${destX}, ${destY}) with size (${destWidth}, ${destHeight})`);
  } else {
    console.error(`Sprite sheet not found for spriteId: ${gameElement.spriteId}`);
    ctx.fillStyle = 'red';
    ctx.fillRect(destX, destY, 40, 20); // Fallback: draw a red rectangle if sprite sheet is missing
  }
}

// Render all game elements using their individual sourceCoord for placement and sourceCoords for sprite extraction
function renderAllGameElements(ctx, gameElements) {
  console.log("Rendering all game elements...");
  gameElements.forEach(element => {
    renderGameElement(ctx, element);
  });
}

// Main setup function to load everything and render the game elements
async function setupGameBoard(ctx, gameSettingsData, gameSessionId) {
  console.log("Setting up game board...");
  const spriteIds = gameSettingsData.spriteIds;
  if (!spriteIds || spriteIds.length === 0) {
    console.error("No spriteIds found in gameSettingsData.");
    return;
  }

  console.log("Fetching sprites and game elements...");
  await fetchSprites(spriteIds);   // Fetch sprite sheets using _id
  await preloadImages();           // Preload and cache sprite sheet images
  gameElements = await fetchGameElements(); // Fetch game elements and cache them

  if (gameElements.length) {
    console.log("Game elements and sprites loaded, initializing rendering...");
    renderAllGameElements(ctx, gameElements); // Render all game elements
  } else {
    console.error("No game elements found.");
  }
}

// Render dealing animation for a single domino using cached sprite images
function renderDealingAnimation(ctx, x, y, playerIndex) {
  console.log(`Rendering dealing animation for player ${playerIndex + 1} at (${x}, ${y})`);

  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // Clear canvas

  // Fetch a sprite from the cache
  const sprite = Object.values(spritesMap)[0];  // Example: get the first sprite for now

  if (sprite) {
    const img = spriteImagesCache[sprite.imageSrc];
    const [srcX, srcY, srcWidth, srcHeight] = sprite.sourceCoords;
    const [spriteX, spriteY, spriteWidth, spriteHeight] = sprite.spriteCoords;

    // Draw the cached domino sprite using source and sprite coordinates
    ctx.drawImage(img, srcX, srcY, srcWidth, srcHeight, x, y, spriteWidth, spriteHeight);
    console.log(`Sprite rendered at (${x}, ${y}) with width ${spriteWidth} and height ${spriteHeight}`);
  } else {
    console.error("No sprite found for dealing animation. Rendering a fallback domino.");
    ctx.fillStyle = playerIndex % 2 === 0 ? 'blue' : 'green';
    ctx.fillRect(x, y, 40, 20); // Draw a fallback "domino" as a rectangle
  }

  // Optionally, add player labels
  ctx.font = "12px Arial";
  ctx.fillStyle = "white";
  ctx.fillText(`Player ${playerIndex + 1}`, x + 10, y + 15);
}

window.startDealingAnimation=startDealingAnimation;
  // Start dealing animation for a single domino
  function startDealingAnimation(ctx, playerPositions, gameSessionId) {
    console.log("Starting dealing animation...");
    dealingAnimationActive = true;
    let dealCount = 0;
    const maxDeals = 10; // Assuming each player gets 10 dominoes
    const dealInterval = setInterval(() => {
      if (dealCount >= maxDeals) {
        console.log("Dealing animation completed.");
        clearInterval(dealInterval);
        dealingAnimationActive = false;

        // After dealing, update the game state to 'playing'
        updateGameStateToPlaying(gameSessionId);
        return;
      }

      // For each deal, animate a domino flying to each player position
      playerPositions.forEach((position, index) => {
        console.log(`Dealing domino to player ${index + 1} at position:`, position);
        renderDealingAnimation(ctx, position.x, position.y, index);
      });

      dealCount++;
    }, 300); // Deal one domino every 300ms for 3 seconds
  }

  // Render dealing animation for a single domino using cached sprite images
  function renderDealingAnimation(ctx, x, y, playerIndex) {
    console.log(`Rendering dealing animation for player ${playerIndex + 1} at (${x}, ${y})`);

    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // Clear canvas

    // Fetch a sprite from the cache (replace with a domino sprite)
    const spriteImage = fetchSprites()

    if (spriteImage) {
      ctx.drawImage(spriteImage, x, y, 40, 20); // Draw the cached domino sprite
    } else {
      console.error("No sprite found for dealing animation. Rendering a fallback domino.");
      ctx.fillStyle = playerIndex % 2 === 0 ? 'blue' : 'green';
      ctx.fillRect(x, y, 40, 20); // Draw a fallback "domino" as a rectangle
    }

    // Optionally, add player labels
    ctx.font = "12px Arial";
    ctx.fillStyle = "white";
    ctx.fillText(`Player ${playerIndex + 1}`, x + 10, y + 15);
  }


  // MutationObserver to detect when EJS-rendered DOM is added
  const observer = new MutationObserver(async (mutations) => {
    mutations.forEach(mutation => {
      mutation.addedNodes.forEach(async (node) => {
        if (node.querySelector && node.querySelector('.cardTableGameDiv')) {
          console.log("Card table detected in DOM.");
          initializeCanvasContext(); // Initialize canvas context after it becomes available

          const gameSessionId = node.getAttribute('data-game-session-id');
          const cardTableGameDiv = document.querySelector('.cardTableGameDiv');
          const gameSettingsData = extractGameSettingsData(cardTableGameDiv);

          if (gameSettingsData && ctx) {
            await setupGameBoard(ctx, gameSettingsData, gameSessionId);
          }
        }
      });
    });
  });

  // Start observing the DOM for changes
  observer.observe(document.body, { childList: true, subtree: true });

  console.log("Game logic initialized.");
});

</script>