<script>
    document.addEventListener('DOMContentLoaded', () => {
      let socket = io('/games');
  
      function bindSocketEvents() {
        socket.on('playerJoined', (data) => {
          const { players, maxPlayers } = data;
          const currentUserId = document.querySelector('.cardTableGameDiv').getAttribute('data-user-id');
          const playerSeatsContainer = document.getElementById('playerSeats');
  
          playerSeatsContainer.innerHTML = '';
  
          players.filter(player => player._id !== currentUserId).forEach((player, index) => {
            const playerSeat = document.createElement('div');
            playerSeat.classList.add('playerSeat');
            playerSeat.id = `playerSeat_${index}`;
            playerSeat.innerHTML = `
              <h3>Seat ${index + 1}: ${player.displayName}</h3>
              <h6 class="last_move" id="last_move_${player._id}">Last Move: ${player.lastMove || 'N/A'}</h6>
              <h6 class="ping_socket" id="ping_socket_${player._id}">Ping: N/A</h6>
            `;
            playerSeatsContainer.appendChild(playerSeat);
          });
  
          for (let i = players.length; i < maxPlayers; i++) {
            const emptySeat = document.createElement('div');
            emptySeat.classList.add('playerSeat');
            emptySeat.id = `playerSeat_${i}`;
            emptySeat.innerHTML = `<div><h3>Seat ${i + 1}: Empty</h3></div>`;
            playerSeatsContainer.appendChild(emptySeat);
          }
        });
      }
  
      document.addEventListener('ejsRenderComplete', () => {
        console.log('EJS content rendered, rebinding socket events');
        bindSocketEvents();
      });
  
      socket.on('connect', () => {
        console.log('Connected to GAMES CLIENT');
      });
  
      function readyUp(userId, gameSessionId) {
        socket.emit('ready up', userId, gameSessionId);
      }
  
      socket.on('allPlayersReady', () => {
        const gameSessionId = document.querySelector('.cardTableGameDiv').getAttribute('data-game-session-id');
        socket.emit('requestStateUpdate', { gameSessionId });
      });
  
      function updatePlayerTurn(currentTurnId, players) {
        const turnElement = document.querySelector('.cardTableGameDiv h2');
        if (turnElement) {
          const currentPlayer = players.find(player => player._id === currentTurnId);
          turnElement.textContent = currentPlayer ? `Player turn: ${currentPlayer.displayName}` : 'Player turn: Unknown';
        }
      }
  
      socket.on('ping', (data) => {
        const gameSessionId = document.querySelector('.cardTableGameDiv')?.getAttribute('data-game-session-id');
        if (gameSessionId) {
          socket.emit('pong', { ...data, gameSessionId });
        }
      });
  
      socket.on('state update', (updatedState) => {
        const stateElement = document.querySelector('.cardTableGameDiv h4');
        if (stateElement) {
          stateElement.textContent = `Current State: ${updatedState.state}`;
        }
      });
  
      socket.on('updateGamesList', (games) => {
        const gamesInSessionDiv = document.querySelector('.gamesInSession');
        gamesInSessionDiv.innerHTML = '<h2>Games in Session Here</h2>';
        games.forEach(game => {
          const gameButton = document.createElement('button');
          gameButton.classList.add('joinGameButton');
          gameButton.setAttribute('data-game-id', game._id);
          gameButton.innerHTML = `<h2>Play ${game.name}</h2>`;
  
          if (game.status === 'waiting') {
            gameButton.innerHTML = `<h2>Join ${game.name} (Waiting for players)</h2>`;
          } else if (game.status === 'inProgress') {
            gameButton.classList.add('spectateGameButton');
            gameButton.innerHTML = `<h2>Spectate ${game.name}</h2>`;
          }
  
          gamesInSessionDiv.appendChild(gameButton);
        });
      });
  
      socket.emit('requestGamesList');
  
      socket.on('ping result', (data) => {
        const pingElement = document.getElementById('playerPing');
        if (pingElement) {
          pingElement.innerHTML = `Ping: ${data.latency} ms`;
        }
      });
  
      function fetchGame(action, gameId) {
        fetch(`/${action}/${gameId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        })
        .then(response => response.text())
        .then(html => {
          document.getElementById('launcher').remove();
          document.getElementById('gameContainer').innerHTML = html;
        })
        .catch(error => {
          console.error('Error fetching and rendering game table:', error);
        });
      }
  
      // Event listener for dynamically loaded join buttons
      document.body.addEventListener('click', (event) => {
        if (event.target && event.target.matches('.joinGameButton')) {
          const gameId = event.target.getAttribute('data-game-id');
          const action = 'games/launcher/join';  // Updated path for joining
  
          // Emit the player join event and fetch the game
          socket.emit('playerJoin', { gameSessionId: gameId });
          fetchGame(action, gameId);  // Now using 'games/launcher/join'
        }
  
        // Handle create session button
        if (event.target && event.target.matches('.createSessionButton')) {
          const gameId = event.target.getAttribute('data-game-id');
          const action = '/games/launcher/create-session';
  
          // Fetch to create a new session
          fetch(action, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ gameId })
          })
          .then(response => response.text())
          .then(html => {
            document.getElementById('launcher').remove();
            document.getElementById('gameContainer').innerHTML = html;
          })
          .catch(error => {
            console.error('Error creating game session:', error);
          });
        }
  
        if (event.target && event.target.matches('.controlButton') && event.target.textContent.trim() === 'Ready to Play') {
          const sessionId = event.target.getAttribute('data-session-id');
          const userId = event.target.getAttribute('data-user-id');
          readyUp(userId, sessionId);
        }
      });
    });
  </script>
  