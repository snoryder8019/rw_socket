<script>
  document.addEventListener('DOMContentLoaded', () => {    
    let socket = io('/games');    
    socket.on('connect', () => {
      console.log('Connected to GAMES CLIENT');
    });
    //listen for 'players update'
    function readyUp(userId,gameSessionId) {   
      console.log(`READY UP FUNCTION sessionId:${gameSessionId}`)   
        socket.emit('ready up', 
          userId,
          gameSessionId 
        );
        }


// Listen for when a player joins
socket.on('playerJoined', (data) => {
    const { players, maxPlayers } = data;

    // Clear all player seats first
    document.querySelectorAll('.playerSeat').forEach((seat) => {
        seat.innerHTML = '<div class="loaderWheel"><div class="wheel"></div></div>';
    });

    // Loop through each player and update the seat
    players.forEach((player, index) => {
        const seat = document.getElementById(`playerSeat_${index}`);
        if (seat && player) {
            seat.innerHTML = `
                <div><h3>Seat ${index + 1}: ${player.displayName}</h3></div>
                <div><h3 class="last_move_${player._id}">Last Move: ${player.lastMove || 'N/A'}</h3></div>
                <h6 style="color:red" class="ping_socket${player._id}"></h6>
            `;
        }
    });

    // Check if all players are ready
    if (players.length === maxPlayers) {
        // Signal that all players are ready
        socket.emit('allPlayersReady', { sessionId: gameSettingsData._id });
    }
});

// Listen for 'allPlayersReady' event
socket.on('allPlayersReady', () => {
    document.querySelector('.state_message').textContent = 'All players are ready!';
});

    socket.on('state update', async(sessionId) => {
      console.log('state update packet sending');
   await new GameState().update()
    });

 

    function fetchGame(action, gameId) {
     // appendWheel(event.target);
      fetch(`/games/${action}/${gameId}`, {
        method: 'POST', // or 'GET', depending on your API design
        headers: {
          'Content-Type': 'application/json' // Adjust headers as needed
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.text(); // Handle HTML content
      })
      .then(html => {
        document.getElementById('launcher').remove(); // Optionally remove launcher if needed
        document.getElementById('gameContainer').innerHTML = html; // Update the game container with new HTML
      })
      .catch(error => {
        console.error('Error fetching and rendering game table:', error);
      });
    }

    // Event listener for dynamically loaded join buttons
    document.body.addEventListener('click', (event) => {
      if (event.target && event.target.matches('.controlButton') && event.target.textContent.trim() === 'Ready to Play') {
    const sessionId = event.target.getAttribute('data-session-id');
    const userId = event.target.getAttribute('data-user-id');
    console.log(`GMAES EJS ~~~~~ sesshioinId:${sessionId}`)
    readyUp(userId,sessionId); // Call the readyUp function with the sessionId
  }
  if (event.target && event.target.matches('.joinGameButton')) {
        const userId = event.target.getAttribute('data-user-id');
        const gameId = event.target.getAttribute('data-game-id');
        const action = event.target.getAttribute('action-game');
        const gameName = event.target.getAttribute('game');
        console.log(`${userId} wants to join ${gameName}: ${gameId}`);

        // Emit the join game session event to the server via socket
        socket.emit('playerJoin', { user: user, gameSessionId: gameId });
        fetchGame(action, gameId);
        // Fetch the updated game table to re-render
      }
    });
  });
</script>
