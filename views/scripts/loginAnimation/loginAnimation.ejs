<script>
document.addEventListener('DOMContentLoaded', () => {
    const targetElement = document.querySelector('.login_form_basic');

    // Function to fetch and render login animation
    async function renderLoginAnimation() {
        try {
            const response = await fetch('/users/usersAvatars');
            const avatarUrls = await response.json(); // Assuming the response is an array of avatar URLs

            if (avatarUrls.length > 0) {
                console.log('Creating canvas...');

                // Create and set up the canvas
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');

                // Set canvas dimensions to match the login form
                canvas.width = targetElement.clientWidth;
                canvas.height = targetElement.clientHeight;
                canvas.classList.add('avatar_canvas');
                targetElement.appendChild(canvas);

                // Determine avatar size based on screen width
                const avatarSize = window.innerWidth <= 768 ? 40 : 50; // Smaller size on 768px or smaller screens

                // Store avatar objects for animation
                const avatarObjects = await Promise.all(
                    avatarUrls.map(url => loadAvatarImage(url, canvas.width, canvas.height, avatarSize))
                );

                // Start animation loop with connecting lines
                animateAvatarsAndLines(ctx, avatarObjects, canvas.width, canvas.height);
            }
        } catch (error) {
            console.error('Error in renderLoginAnimation:', error);
        }
    }

    // Function to load avatar image and create an avatar object
    function loadAvatarImage(url, canvasWidth, canvasHeight, avatarSize) {
        return new Promise((resolve) => {
            const img = new Image();
            img.src = url;

            img.onload = () => {
                resolve({
                    img: img,
                    x: Math.random() * canvasWidth, // Random starting x position
                    y: Math.random() * canvasHeight, // Random starting y position
                    xDirection: Math.random() < 0.5 ? 1 : -1, // Random initial x direction
                    yDirection: Math.random() < 0.5 ? 1 : -1, // Random initial y direction
                    speed: Math.random() * 0.04 + 0.04, // Slow random speed for creeping
                    size: avatarSize // Dynamically set avatar size
                });
            };

            img.onerror = () => {
                console.error(`Failed to load image: ${url}`);
                resolve(null);
            };
        });
    }

    // Function to animate avatars and draw lines connecting them
    function animateAvatarsAndLines(ctx, avatarObjects, canvasWidth, canvasHeight) {
        function draw() {
            // Clear the canvas for the next frame
            ctx.clearRect(0, 0, canvasWidth, canvasHeight);

            // Draw lines connecting avatars first (so they appear behind the avatars)
            drawConnectingLines(ctx, avatarObjects);

            // Draw and update each avatar's position
            avatarObjects.forEach((avatar, index) => {
                if (avatar) {
                    // Draw avatar as a circle
                    drawCircleImage(ctx, avatar.img, avatar.x, avatar.y, avatar.size);

                    // Update avatar position
                    avatar.x += avatar.xDirection * avatar.speed;
                    avatar.y += avatar.yDirection * avatar.speed;

                    // Reverse direction if avatar hits canvas edges
                    if (avatar.x <= 0 || avatar.x + avatar.size >= canvasWidth) {
                        avatar.xDirection *= -1;
                    }
                    if (avatar.y <= 0 || avatar.y + avatar.size >= canvasHeight) {
                        avatar.yDirection *= -1;
                    }
                }
            });

            // Request the next frame
            requestAnimationFrame(draw);
        }

        requestAnimationFrame(draw);
    }

    // Function to draw connecting lines between avatars
    function drawConnectingLines(ctx, avatarObjects) {
        ctx.strokeStyle = 'purple'; // Set line color to purple
        ctx.lineWidth = 2;

        const validAvatars = avatarObjects.filter(avatar => avatar);

        // Draw lines between avatars
        for (let i = 0; i < validAvatars.length; i++) {
            const avatar1 = validAvatars[i];
            const avatar2 = validAvatars[(i + 1) % validAvatars.length]; // Connect the last avatar to the first one

            drawLine(ctx, avatar1.x + avatar1.size / 2, avatar1.y + avatar1.size / 2, avatar2.x + avatar2.size / 2, avatar2.y + avatar2.size / 2);
        }
    }

    // Function to draw a line between two points
    function drawLine(ctx, x1, y1, x2, y2) {
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
    }

    // Function to draw an image in a circular clipping area
    function drawCircleImage(ctx, img, x, y, size) {
        ctx.save(); // Save the current state

        // Create a circular clipping path
        ctx.beginPath();
        ctx.arc(x + size / 2, y + size / 2, size / 2, 0, Math.PI * 2);
        ctx.closePath();
        ctx.clip();

        // Maintain the aspect ratio of the image
        const imgAspectRatio = img.width / img.height;
        let drawWidth, drawHeight;

        if (imgAspectRatio > 1) {
            // Image is wider than it is tall
            drawWidth = size;
            drawHeight = size / imgAspectRatio;
        } else {
            // Image is taller than it is wide, or square
            drawHeight = size;
            drawWidth = size * imgAspectRatio;
        }

        // Center the image inside the circular area
        const offsetX = x + (size - drawWidth) / 2;
        const offsetY = y + (size - drawHeight) / 2;

        // Draw the image maintaining its aspect ratio
        ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);

        ctx.restore(); // Restore the original state
    }

    if (targetElement) {
        renderLoginAnimation();
    }
});

    </script>
    