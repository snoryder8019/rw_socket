<script>
    // function getDirImages(directory) {
    //     fetch(`/media/images/${directory}`)
    //         .then(response => response.text())
    //         .then(imageGridHtml => {
    //             // Assuming you have a div with id="imageGrid" to display the images
    //             document.getElementById('imageGrid').innerHTML = imageGridHtml;
    //         })
    //         .catch(error => {
    //             console.error('Error fetching images:', error);
    //         });
    // }

  function addField(name) {
    const container = document.getElementById(`${name}-container`);
    const index = container.querySelectorAll(`input[name="${name}[]"]`).length;
    const newField = document.createElement("div");
    newField.className = "array-item";
    newField.innerHTML = `
      <input type="text" name="${name}[]" id="${name}-${index}">
      <button type="button" class="remove-btn">Remove</button>
    `;
    container.appendChild(newField);
  }

  // Function to remove a field
  function removeField(elementId, routeSub,id,index) {
  // Find the element by its ID
  const element = document.getElementById(elementId);
  
  if (element) {
    // Log the child nodes of the element's parent node
    console.log(element.parentNode.childNodes);

    // Find the input field within the parent node
    const inputField = element.querySelector('input');

    if (inputField) {
      // Capture the value of the input field
      const inputValue = inputField.value;
      console.log('Input value to be removed:', inputValue);
//fetch(`${routeSub}/popImagesArrayIndex/${id}/${index}`)
      // Remove the parent element from the DOM
     element.remove();
    }
  }
}

  // Function to initialize the observer on all containers


  </script>
