<!-- views/layouts/games/socketScripts.ejs -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const socket = io('/games');
        let currentRoomId = null;

        // Handle connection
        socket.on('connect', () => {
            console.log('Connected to /games namespace with ID:', socket.id);
        });

        // Function to initialize event listeners for game selection
        function initializeGameSelection() {
            const gameLinks = document.querySelectorAll('.gameSelection');
            if (gameLinks.length > 0) {
                gameLinks.forEach(link => {
                    link.addEventListener('click', (event) => {
                        event.preventDefault();
                        console.log('Game selected!');
                        const gameId = link.getAttribute('data-game');
                        joinMatchmaking(gameId);
                    });
                });
            }
        }

        // Observe for the launcher element to be added to the DOM
        const observer = new MutationObserver((mutations, observer) => {
            const launcherElement = document.getElementById('launcher');
            if (launcherElement) {
                initializeGameSelection();
                observer.disconnect(); // Stop observing once the launcher is found
            }
        });

        observer.observe(document.body, { childList: true, subtree: true });

        function joinMatchmaking(gameId) {
            console.log(`Joining matchmaking for game ID: ${gameId}`);
            socket.emit('joinMatchmaking', gameId);
        }

        // When the server assigns a room after matchmaking
        socket.on('assignedRoom', (roomId) => {
            currentRoomId = roomId;
            console.log(`Assigned to room: ${roomId}`);
            switchToGameRoom();
        });

        // When a player joins the room
        socket.on('updatePlayerList', (players) => {
            const playerListDiv = document.getElementById('playerList');
            playerListDiv.innerHTML = players.map(p => `<p>${p.username} ${p.ready ? '(Ready)' : ''}</p>`).join('');

            // Show start button if this user is the first player
            if (players.length > 0 && players[0].id === socket.id) {
                document.getElementById('startGameButton').style.display = 'block';
            }
        });

        // Player ready function
        function readyUp() {
            socket.emit('playerReady', { roomId: currentRoomId });
        }

        // Start game button click handler
        document.getElementById('startGameButton').addEventListener('click', () => {
            socket.emit('startGame', { roomId: currentRoomId });
        });

        // Handle game start
        socket.on('startGameSession', () => {
            switchToGameSession();
        });

        // Button to exit from game room to launcher
        document.getElementById('exitGameRoomButton').addEventListener('click', () => {
            switchToLauncher();
        });

        // Button to exit from game session to launcher
        document.getElementById('exitGameSessionButton').addEventListener('click', () => {
            switchToLauncher();
        });

        // Button to exit from card table to launcher
        document.getElementById('exitCardTableButton').addEventListener('click', () => {
            switchToLauncher();
        });

        // Function to switch to game room
        function switchToGameRoom() {
            document.getElementById('launcher').style.display = 'none';
            document.getElementById('gameRoom').style.display = 'block';
        }

        // Function to switch to game session
        function switchToGameSession() {
            document.getElementById('gameRoom').style.display = 'none';
            document.getElementById('gameSession').style.display = 'block';
            // Initialize the game canvas and start the game logic
        }

        // Function to switch to card table
        function switchToCardTable() {
            document.getElementById('launcher').style.display = 'none';
            document.getElementById('cardTable').style.display = 'block';
            // Initialize the card table canvas and start the game logic
        }

        // Function to switch back to the launcher
        function switchToLauncher() {
            document.getElementById('gameRoom').style.display = 'none';
            document.getElementById('gameSession').style.display = 'none';
            document.getElementById('cardTable').style.display = 'none';
            document.getElementById('launcher').style.display = 'block';
            currentRoomId = null;
        }
    });
</script>
