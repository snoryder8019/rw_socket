<script>
    //views/layouts/games/socketScripts.ejs
    document.addEventListener('DOMContentLoaded', function () {
        const socket = io('/games');
        let currentRoomId = null;
    
        function initializeObserver() {
            const observer = new MutationObserver((mutations, observer) => {
    
                const launcherElement = document.getElementById('launcher');
                const gameManagers = document.getElementsByClassName('gameManagers');
                const gameMenu = document.getElementById('gameMenu');
                const playerList = document.getElementById('playerList');
                
                if (launcherElement) {
                    initializeGameSelection();
                }
                
                if (gameManagers.length > 0) {
                    Array.from(gameManagers).forEach(gameManager => {
                        initializeGameFunction(gameManager);
                    });
                }
                
                if (gameMenu && playerList) {
                    initializeSocketListeners();
                }
            });
    
            observer.observe(document.body, { childList: true, subtree: true });
        }
    
        function updateLiveGamesData(msg) {
            console.log(`update Live Games Data: ${msg}`);
        }
    
        function initializeGameSelection() {
            const gameLinks = document.querySelectorAll('.gameSelection');
            if (gameLinks.length > 0) {
                gameLinks.forEach(link => {
                    link.addEventListener('click', (event) => {
                        event.preventDefault();
                        console.log('Game selected!');
                        const gameId = link.getAttribute('data-game');
                        joinMatchmaking(gameId);
                        updateLiveGamesData('initGameSelect');
                    });
                });
            }
        }
    
        function initializeGameFunction(button) {
            const url = button.getAttribute('button-url');
            if (url) {
                button.addEventListener('click', () => {
                    console.log(`Fetching data from URL: ${url}`);
                    updateLiveGamesData('initGameFunction');
    
                    fetch(url, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.text())
                    .then(data => {
                        document.getElementById('launcher').style.display = 'none';
                        document.getElementById('matchmaking').innerHTML = data;
                        initializeObserver(); // Reinitialize the observer after content is loaded
                    })
                    .catch(error => console.error('Error fetching data:', error));
                });
            }
        }
    
        function joinMatchmaking(gameId) {
            console.log(`Joining matchmaking for game ID: ${gameId}`);
            updateLiveGamesData('joinMatchmaking');
            socket.emit('joinMatchmaking', gameId);
            fetch(`games/gameSessions/join/${gameId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(data => {
                document.getElementById('launcher').style.display = 'none';
                document.getElementById('matchmaking').innerHTML = data;
                initializeObserver(); // Reinitialize the observer after content is loaded
            })
            .catch(error => console.error('Error fetching data:', error));
        }
    
        function initializeSocketListeners() {
            socket.on('assignedRoom', (roomId) => {
                updateLiveGamesData('initSocketListeners');
                currentRoomId = roomId;
                console.log(`Assigned to room: ${roomId}`);
                switchToGameRoom();
    
                // Start polling for player list updates
                startPlayerListPolling(roomId);
            });
    
            socket.on('updatePlayerList', (players) => {
                updateLiveGamesData('updatePlayerList');
                updatePlayerList(players);
            });
    
            socket.on('startGameSession', () => {
                 console.log('Game session started. Rendering the game.');

    // Hide other sections and show the game canvas
    document.getElementById('launcher').style.display = 'none';
    document.getElementById('cardTable').style.display = 'block';

    // Initialize the game
    initializeGame();
    render();
            });
        }
    
        function switchToGameRoom() {
            fetch(`/games/join-game/${gameId}`);
        }
    
        function switchToGameSession() {
            document.getElementById('gameRoom').style.display = 'none';
            document.getElementById('gameSession').style.display = 'block';
        }
    
        function switchToLauncher() {
            document.getElementById('gameRoom').style.display = 'none';
            document.getElementById('gameMenu').style.display = 'none';
            document.getElementById('gameSession').style.display = 'none';
            document.getElementById('cardTable').style.display = 'none';
            document.getElementById('launcher').style.display = 'block';
            currentRoomId = null;
        }
    
        function startPlayerListPolling(roomId) {
            setInterval(() => {
                console.log(`Polling for player list in room ${roomId}`);
                socket.emit('getPlayerList', roomId);
            }, 5000); // Poll every 5 seconds
        }
    
        function updatePlayerList(players) {
            const playerListDiv = document.getElementById('playerList');
            playerListDiv.innerHTML = players.map(p => `<p>${p.username} ${p.ready ? '(Ready)' : ''}</p>`).join('');
        }
 
        initializeObserver(); // Initialize observer on initial load
    });
 // Example of initializing the g

    </script>
    <script src="/javascripts/games/dominoes.js"> </script>