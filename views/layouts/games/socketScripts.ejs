<script>
//views/layouts/games/socketScripts.ejs
    document.addEventListener('DOMContentLoaded', function () {
        const socket = io('/games');
        let currentRoomId = null;

        // Handle connection
        socket.on('connect', () => {
            console.log('Connected to /games namespace with ID:', socket.id);
         //   updateLiveGameInfo(`Connected to server with ID: ${socket.id}`);
        });

        function updateLiveGamesData(msg) {
            console.log(`update Live Games Data: ${msg}`);
        }

        function initializeGameSelection() {
            const gameLinks = document.querySelectorAll('.gameSelection');
            if (gameLinks.length > 0) {
                gameLinks.forEach(link => {
                    link.addEventListener('click', (event) => {
                        event.preventDefault();
                        console.log('Game selected!');
                        const gameId = link.getAttribute('data-game');
                        
                        joinMatchmaking(gameId);
                        updateLiveGamesData('initGameSelect');
                    });
                });
            }
        }
        
        function initializeGameFunction(button) {
            const url = button.getAttribute('button-url');
            if (url) {
                button.addEventListener('click', () => {
                    console.log(`Fetching data from URL: ${url}`);
                    updateLiveGamesData('initGameFunction');
                    
                    fetch(url, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.text())
                    .then(data => {
                        document.getElementById('launcher').style.display = 'none';
                        document.getElementById('matchmaking').innerHTML = data;
                    })
                    .catch(error => console.error('Error fetching data:', error));
                });
            }
        }
        
        function joinMatchmaking(gameId) {
            console.log(`Joining matchmaking for game ID: ${gameId}`);
            updateLiveGamesData('joinMatchmaking');
            socket.emit('joinMatchmaking', gameId);
            fetch(`games/gameSessions/join/${gameId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(data => {
                document.getElementById('launcher').style.display = 'none';
                document.getElementById('matchmaking').innerHTML = data;
            })
            .catch(error => console.error('Error fetching data:', error));
        }
        
        
        function initializeSocketListeners() {
            socket.on('assignedRoom', (roomId) => {
                updateLiveGamesData('initSocketListeners');
                currentRoomId = roomId;
                console.log(`Assigned to room: ${roomId}`);
                // updateLiveGameInfo(`Assigned to room: ${roomId}`);
                switchToGameRoom();
            });
            
            socket.on('updatePlayerList', (players) => {
                updateLiveGamesData('updatePlayerList');
                const playerListDiv = document.getElementById('playerList');
                playerListDiv.innerHTML = players.map(p => `<p>${p.username} ${p.ready ? '(Ready)' : ''}</p>`).join('');
                
                if (players.length > 0 && players[0].id === socket.id) {
                    
                }
            });
            
            
            
            socket.on('startGameSession', () => {
                switchToGameSession();
            });
            
            
            
            
        }
        
        function switchToGameRoom() {
            fetch(`/games/join-game/${gameId}`);
        }
        
        function switchToGameSession() {
            document.getElementById('gameRoom').style.display = 'none';
            document.getElementById('gameSession').style.display = 'block';
        }
        
        function switchToCardTable() {
            document.getElementById('launcher').style.display = 'none';
            document.getElementById('cardTable').style.display = 'block';
        }
        
        function switchToLauncher() {
            document.getElementById('gameRoom').style.display = 'none';
            document.getElementById('gameMenu').style.display = 'none';
            document.getElementById('gameSession').style.display = 'none';
            document.getElementById('cardTable').style.display = 'none';
            document.getElementById('launcher').style.display = 'block';
            currentRoomId = null;
        }
        
        
        
        const observer = new MutationObserver((mutations, observer) => {
            updateLiveGamesData('mutations observes launcher gamemgr gmaemenu playerlist');
            const launcherElement = document.getElementById('launcher');
            const gameManagers = document.getElementsByClassName('gameManagers');
            const gameMenu = document.getElementById('gameMenu');
            const playerList = document.getElementById('playerList');
            
            if (launcherElement) {
                initializeGameSelection();
            }
            
            if (gameManagers.length > 0) {
                Array.from(gameManagers).forEach(gameManager => {
                    initializeGameFunction(gameManager);
                });
            }
            
            if (gameMenu && playerList) {
                initializeSocketListeners();
             //   observer.disconnect(); // Stop observing once both elements are found
            }
        });
        
        observer.observe(document.body, { childList: true, subtree: true });
        
        
        socket.on('updateGameMenu', (players) => {
    const playerListDiv = document.getElementById('playerList');
    playerListDiv.innerHTML = ''; // Clear the existing list

    players.forEach(player => {
        // Create the player item container
        const playerItem = document.createElement('div');
        playerItem.classList.add('userswOnline');

        // Create and set up the avatar image
        const avatarImg = document.createElement('img');
        avatarImg.src = player.avatarUrl; // Assuming player.avatarUrl contains the avatar image URL
        avatarImg.alt = `${player.displayName}'s avatar`;
        avatarImg.classList.add('avatar'); // Add a class for styling if needed

        // Create and set up the player info container
        const playerInfo = document.createElement('div');
        playerInfo.classList.add('message');

        // Add the display name and ready status
        const playerName = document.createElement('p');
        playerName.textContent = `${player.displayName} (${player.ready ? 'Ready' : 'Not Ready'})`;

        // Append the elements together
        playerInfo.appendChild(playerName);
        playerItem.appendChild(avatarImg);
        playerItem.appendChild(playerInfo);
        playerListDiv.appendChild(playerItem);
    });

    // Check if all players are ready and display the start button accordingly
    const allReady = players.every(player => player.ready);
    if (allReady && userID === players[0].id) {
        document.getElementById('startButton').style.display = 'block';
    } else {
        document.getElementById('startButton').style.display = 'none';
    }
});


    // Start observing the entire document for attribute changes
    observer.observe(document, {
        attributes: true,
        subtree: true,
    });

    // Emit events based on button clicks
    document.querySelectorAll('.gameManagers').forEach(button => {
        button.addEventListener('click', (event) => {
            const buttonURL = event.target.getAttribute('button-url');
            if (buttonURL.includes('ready')) {
                socket.emit('playerReady', { userId: userID });
            } else if (buttonURL.includes('exit')) {
                socket.emit('leaveSession', { userId: userID });
            } else if (buttonURL.includes('join')) {
                socket.emit('joinSession', { userId: userID });
            } else if (buttonURL.includes('start')) {
                socket.emit('startGame', { userId: userID });
            }
        });
    });
});

</script>
