<div id="chat-window-basic">
    <%- include('../animations/confetti')%>

    <% if(typeof user === 'object' && user) { %>
        <script>var firstName = "<%= user.firstName %>";</script>
        
        <div id="userList">
            <div class="loaderWheel">
                <div class="loaderDiv"><h3>loading chatroom...</h3></div>
                <div class="loaderDiv"><div class="wheel"></div></div>
            </div>
        </div>
        <div id="chatTabs">
           <%if (typeof chatRooms == 'object' && chatRooms){%>
         <%for(let i=0; i<chatRooms.length;i++){%>
            <div class="tab_section"><%=chatRooms[i].roomName%></div>
            <%}%>
            <%}%>
         <!--this will ultimately pull up a list of rooms you have permission to join-->
            <div class="tab_section join">join_room_+</div>
        </div>
        <div id="chat">
            <div id="messages"></div>
        </div>
        <div class="inputBar">
            <input id="chatInput" autocomplete="off" /><button id="submitChat">Send</button>
        </div>
    <% } else { %>
        <p>Please log in to join the chat.</p>
    <% } %>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        var socket = io('/main_chat');
        let currentPage = 1;
        const messagesPerPage = 12;
    
        function requestInitialMessages() {
            socket.emit('fetch messages', { roomId: 'YourRoomId', page: currentPage, messagesPerPage: messagesPerPage });
        }
    
        socket.on('messages fetched', (messages) => {
            if (messages.length) {
                const reversedMessages = messages.reverse();
                reversedMessages.forEach(messageObject => {
                    let isOwnMessage = messageObject.user === "currentUserDisplayName";
                    addMessage(messageObject, isOwnMessage);
                });
                currentPage++;
            }
        });
    
        function addMessage(messageObject, isOwnMessage = false) {
            const messagesContainer = document.getElementById('chat');
            const shouldScroll = messagesContainer.scrollTop + messagesContainer.clientHeight + 50 >= messagesContainer.scrollHeight;
    
            const messageDiv = document.createElement('div');
            messageDiv.className = isOwnMessage ? 'message ownMessage' : 'message';
    
            const messageAvatar = document.createElement('img');
            messageAvatar.className = 'usersOnline';
            messageAvatar.src = messageObject.thumbnailUrl || `/images/userHeadshots/defaultThumbnail.png`;
    
            const messageTextSpan = document.createElement('span');
            messageTextSpan.className = 'messageText';
            messageTextSpan.textContent = messageObject.message || 'No message text.';
    
            const actionsDiv = document.createElement('div');
            actionsDiv.className = 'messageActions';
            actionsDiv.id = `${messageObject.id}_actions`;
    
            const heartIcon = document.createElement('span');
            heartIcon.textContent = '❤️';
            // const flagIcon = document.createElement('span');
            // flagIcon.textContent = '🚩';
            const threeDotsIcon = document.createElement('span');
            threeDotsIcon.textContent = '⋮';
    
            actionsDiv.appendChild(heartIcon);
          //  actionsDiv.appendChild(flagIcon);
            actionsDiv.appendChild(threeDotsIcon);
    
            messageDiv.appendChild(messageAvatar);
            messageDiv.appendChild(messageTextSpan);
            messageDiv.appendChild(actionsDiv);
            messagesContainer.appendChild(messageDiv);
    
            if (shouldScroll) {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
        }
    
        socket.on('chat message', (msg) => {
            console.log('chatting...')
            addMessage(msg, msg.user === 'You');
            const messagesContainer = document.getElementById('messages');
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });
    
        document.getElementById('submitChat').addEventListener('click', sendMessage);
        document.getElementById('chatInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    
        function sendMessage() {
            const input = document.getElementById('chatInput');
            const message = input.value.trim();
            if (message !== '') {
                socket.emit('chat message', message);
                input.value = '';
            }
        }
    
        socket.on('user list', (users) => {
            const userList = document.getElementById('userList');
            userList.innerHTML = '';
            users.forEach((user) => {
                const div = document.createElement('div');
                div.className = 'usersOnline';
                div.dataset.userId = user.id;
                div.dataset.userName = user.name;
                div.dataset.userAvatar = user.avatarThumbnailUrl || '/path/to/default/avatar/image.jpg';
    
                const img = document.createElement('img');
                img.className = 'userImage';
                img.src = div.dataset.userAvatar;
                div.appendChild(img);
    
                userList.appendChild(div);
            });
        });
    
        socket.on('connect_error', (error) => {
            console.log('Connection Error:', error);
        });
    
        const chatToggle = document.getElementById('chatToggle');
        const chatWindow = document.getElementById('chat-window-basic');
        chatToggle.addEventListener('click', () => {
            const isOpen = chatWindow.style.transform === "translateX(-106%)";
            chatWindow.style.transform = isOpen ? "translateX(0%)" : "translateX(-106%)";
          //  chatToggle.innerHTML = isOpen ? "C" : "X";
        });
    
        document.addEventListener('click', (event) => {
            if (event.target.classList.contains('usersOnline')) {
                const userId = event.target.parentElement.dataset.userId;
                const userName = event.target.parentElement.dataset.userName;
                const userAvatar = event.target.parentElement.dataset.userAvatar;
    
                const userInfoBox = document.getElementById('userInfoBox');
                userInfoBox.querySelector('.userName').textContent = userName;
                userInfoBox.querySelector('.userAvatar').src = userAvatar;
    
                userInfoBox.style.left = `${event.pageX}px`;
                userInfoBox.style.top = `${event.pageY}px`;
                userInfoBox.style.display = 'block';
            } else {
                const userInfoBox = document.getElementById('userInfoBox');
                userInfoBox.style.display = 'none';
            }
        });
    
        requestInitialMessages();
    });
</script>
