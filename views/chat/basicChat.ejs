<div id="chat-window-basic">
  <div id="userList">
       <div class="loaderWheel">
           <div class="loaderDiv"><h3>loading chatroom...</h3></div>
           <div class="loaderDiv"><div class="wheel"></div></div>
       </div>
   </div>
   <div id="chatTabs">
      <%if (typeof chatRooms == 'object' && chatRooms){%>
    <%for(let i=0; i<chatRooms.length;i++){%>
       <div onclick="changeRooms()" id="tab_section_<%=chatRooms[i]._id%>" class="tab_section"><%=chatRooms[i].roomName%></div>
       <%}%>
       <%}%>
    <!--this will ultimately pull up a list of rooms you have permission to join-->
    
   </div>
  
  <% if(typeof user === 'object' && user) { %>
    <div id="chatContainer">
      <script>var firstName = "<%= user.firstName %>"</script>
      <script>var chatStyle = "<%=user.chatStyle%>"</script>
     <script>var avatarStyle = "<%=user.avatarStyle%>"</script>
     <script id="updatedRoomId">var roomId = "<%=chatRooms[0]._id%>"</script>
      <div id="chat">
          <div id="messages"></div>
          </div>
          </div>
          <div class="inputBar">
              <div class="emojiSlider"></div>
             
              <input class="chatInput"id="chatInput" autocomplete="off" /> <span hidden class="addImage">üñºÔ∏è</span><button id="submitChat">Send</button>
              </div>
  <% } else { %>
      <p>Please log in to join the chat.</p>
  <% } %>
</div>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    function observeEmojiSlider() {
      const emojiSlider = document.querySelector('.emojiSlider');
      
      if (!emojiSlider) {
        // If emojiSlider is not found, retry after a short delay
        setTimeout(observeEmojiSlider, 100); // Adjust the delay as needed
        return;
      }

      // Create an Intersection Observer
      const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            // Element is in view, load the .ejs content
            loadEmojiContent();
            // Stop observing once the content is loaded
            observer.unobserve(entry.target);
          }
        });
      }, { threshold: 0.1 }); // Adjust the threshold as needed

      // Observe the emojiSlider element
      observer.observe(emojiSlider);

      // Function to load the .ejs file content
      function loadEmojiContent() {
        fetch('/getEmojis')
          .then(response => response.text())
          .then(data => {
            emojiSlider.innerHTML = data; // Insert the loaded content into the div
            attachEmojiClickHandlers(); // Attach click handlers to the loaded emojis
          })
          .catch(error => console.error('Error loading the .ejs file:', error));
      }

      // Function to attach click handlers to each emoji
      function attachEmojiClickHandlers() {
        const emojis = emojiSlider.querySelectorAll('.emoji-option');
        emojis.forEach(emoji => {
          emoji.addEventListener('click', () => {
            const emojiValue = emoji.getAttribute('data-emoji');
            selectEmoji(emojiValue);
          });
        });
      }

      // Function to handle emoji selection
      function selectEmoji(emoji) {
        const inputField = document.querySelector('input.chatInput'); // Ensure the correct input selector is used
        if (inputField) {
          const currentValue = inputField.value; // Get the current value of the input field
          inputField.value = currentValue + emoji; // Append the emoji to the current value
        }
      }
    }

    // Call the function to start observing emojiSlider
    observeEmojiSlider();
  });
</script>


<script>
  document.addEventListener('DOMContentLoaded',()=>{


  })
      document.addEventListener('DOMContentLoaded', () => {
          const elements = document.querySelectorAll('.message');
          elements.forEach((element, index) => {
              const delay = index * 0.2; // Adjust the multiplier for different delays
              element.style.animationDelay = `${delay}s`;
          });
      });
  </script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
      var socket = io('/main_chat');
      let currentPage = 1;
      const messagesPerPage = 12; 
      function requestInitialMessages() {
          socket.emit('fetch messages', { roomId: roomId, page: currentPage, messagesPerPage: messagesPerPage });
      }   
      //////

socket.on('connect_error', (err) => {
  console.error('Connection error:', err);
});

socket.on('broadcast', (videoUrl) => {
  const finUrl = videoUrl.videoUrl.videoUrl;
  console.log(`CHANNEL ONE BROADCAST NOTICED url: ${finUrl}`);
  const containerVid = document.querySelector('.myVideo');
  const statusText = document.getElementById('statusText');
  
  // Hide the "New videos here daily!" text
  statusText.style.display = 'none';
  
  // Stop and remove the existing video if it exists
  let existingVideo = document.getElementById('videoPlayer');
  if (existingVideo) {
    existingVideo.pause(); // Stop the video
    existingVideo.src = ''; // Clear the source
    existingVideo.load(); // Stop downloading the video
    existingVideo.remove(); // Remove the video element from the DOM
  }
  
  // Create a new video element and add it to the container
  const videoPlayer = document.createElement('video');
  videoPlayer.id = 'videoPlayer';
  videoPlayer.autoplay = true;
  videoPlayer.muted = true;
  videoPlayer.controls = true;
  videoPlayer.style.maxHeight = '200px';
  videoPlayer.style.width = '100%';

  const sourceElement = document.createElement('source');
  sourceElement.src = `https://${finUrl}`;
  sourceElement.type = 'video/mp4';

  videoPlayer.appendChild(sourceElement);
  containerVid.appendChild(videoPlayer);
  
  // Load and play the new video
  videoPlayer.load();
  videoPlayer.play();
});

socket.on('marquee', (data) => {
  console.log('Received marquee message:', data.message);
  const marqueeText = document.getElementById('marqueeText');
  marqueeText.innerText = data.message;
  marqueeText.style.display = 'block'; // Show the marquee
});

document.addEventListener('click', (event) => {
  if(event.target.classList.contains('play-video')){
    const videoUrl = event.target.getAttribute('data-video');
    console.log(`playVIDDDSS!!k ${videoUrl}`);
    socket.emit('broadcast', { videoUrl: videoUrl });
  }
});

document.addEventListener('click', (event) => {
  if (event.target.classList.contains('marqueeButton')) {
    const marqueeMessage = document.getElementById('marqueeMessage').value;
    console.log('Button clicked', marqueeMessage);
    socket.emit('marquee', { message: marqueeMessage });
    console.log('Marquee event emitted');
  }
});
socket.on('likeUpdated', ({ postId, likes }) => {
  const actionsDiv = document.getElementById(`${postId}_actions`);
  if (!actionsDiv) return;

  const likesCounter = actionsDiv.querySelector('.likesCounter');
  if (likesCounter) {
    likesCounter.textContent = `${likes} ${likes === 1 ? 'like' : ''}`;
  }
});

socket.on('newReply', ({ postId, reply }) => {
  const actionsDiv = document.getElementById(`${postId}_actions`);
  if (!actionsDiv) return;

  const repliesContainer = actionsDiv.parentElement.querySelector('.repliesContainer');
  if (!repliesContainer) return;

  // Append the new reply to the replies container
  renderSingleReply(reply, repliesContainer);

  // Ensure the replies are visible
  repliesContainer.style.display = 'block';

  // Optionally update reply counter if you're showing one
  const repliesCounter = actionsDiv.querySelector('.repliesCounter');
  if (repliesCounter) {
    const currentRepliesCount = parseInt(repliesCounter.textContent) || 0;
    repliesCounter.textContent = `${currentRepliesCount + 1} ${currentRepliesCount + 1 === 1 ? 'reply' : 'üó®Ô∏è'}`;
  }
});


      ////////     
      socket.on('messages fetched', (messages) => {
          if (messages.length) {
              const reversedMessages = messages.reverse();
              reversedMessages.forEach(messageObject => {
                  let isOwnMessage = messageObject.user === "currentUserDisplayName";
                  addMessage(messageObject, isOwnMessage);
              });
              currentPage++;
          }
      });
      let userId = "<%=user._id%>";
      function addMessage(messageObject, isOwnMessage = false) {
    const userId = "<%= user._id %>";  // Ensure userId is declared at the top
    const messagesContainer = document.getElementById('chat');
    const shouldScroll = messagesContainer.scrollTop + messagesContainer.clientHeight + 50 >= messagesContainer.scrollHeight;

    const messageDiv = document.createElement('div');
    messageDiv.className = isOwnMessage ? 'message ownMessage' : 'message';
    
    // Apply CSS Grid to messageDiv
    messageDiv.style.display = 'grid';
    messageDiv.style.gridTemplateColumns = '2fr 8fr 1fr';  // Define the grid layout: avatar, message, actions
    messageDiv.style.alignItems = 'center';  // Vertically align the content in the center

    // Avatar and Display Name (2fr)
    const avatarContainer = document.createElement('div');
    avatarContainer.className = 'avatarContainer';
    avatarContainer.style.gridColumn = '1';  // Place avatar in the first column

    const messageAvatar = document.createElement('img');
    messageAvatar.className = 'usersOnline';
    messageAvatar.src = messageObject.thumbnailUrl || `/images/logo_rst.png`;

    const displayName = document.createElement('span');
    displayName.className = 'userDisplayName';
    displayName.textContent = messageObject.user || 'Unknown User';  // Show user display name

    avatarContainer.appendChild(messageAvatar);
    avatarContainer.appendChild(displayName);  // Place username under avatar

    // Message text and replies (8fr)
    const messageTextContainer = document.createElement('div');
    messageTextContainer.style.gridColumn = '2';  // Place message text in the second column

    const messageTextSpan = document.createElement('span');
    messageTextSpan.className = 'messageText';
    messageTextSpan.textContent = messageObject.message || 'No message text.';

    messageTextContainer.appendChild(messageTextSpan);  // Display the message text

    // Action div (1fr) - Likes and Replies
    const actionsDiv = document.createElement('div');
    actionsDiv.className = 'messageActions';
    actionsDiv.style.gridColumn = '3';  // Place actions in the third column

    // Single Heart with counter
    const likesCounter = document.createElement('span');
    likesCounter.className = 'likesCounter';
    likesCounter.textContent = `${messageObject.likedBy?.length || 0} ‚ù§Ô∏è`;  // One heart icon with counter

    // Single Comment bubble with counter
    const repliesCounter = document.createElement('span');
    repliesCounter.className = 'repliesCounter';
    repliesCounter.textContent = `${messageObject.replies?.length || 0} üó®Ô∏è`;  // One comment bubble with counter

    actionsDiv.appendChild(likesCounter);
    actionsDiv.appendChild(repliesCounter);

    messageDiv.appendChild(avatarContainer);  // Avatar and user name (2fr)
    messageDiv.appendChild(messageTextContainer);  // Message text (8fr)
    messageDiv.appendChild(actionsDiv);  // Likes and replies (1fr)

    // Replies container (initially hidden)
    const repliesContainer = document.createElement('div');
    repliesContainer.className = 'repliesContainer';
    repliesContainer.style.display = 'none';  // Initially hidden

    // If there are replies, render them
    renderReplies(messageObject.replies || [], repliesContainer);

    // Input field for new reply
    const replyInputDiv = document.createElement('div');
    replyInputDiv.className = 'replyInputDiv';

    const replyInputField = document.createElement('input');
    replyInputField.type = 'text';
    replyInputField.className = 'replyInputField';
    replyInputField.placeholder = 'Write a reply...';

    const replySubmitButton = document.createElement('button');
    replySubmitButton.textContent = 'Reply';
    replySubmitButton.className = 'replySubmitButton';

    replyInputDiv.appendChild(replyInputField);
    replyInputDiv.appendChild(replySubmitButton);

    repliesContainer.appendChild(replyInputDiv);  // Add reply input to replies container
    messageTextContainer.appendChild(repliesContainer);  // Place the replies under the message text

    messagesContainer.appendChild(messageDiv);

    // Scroll the container if needed
    if (shouldScroll) {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    const postId = messageObject._id;

    // Like click handler
    likesCounter.addEventListener('click', (e) => {
        const isLiked = e.target.dataset.isLiked === "true";
        handleLikeClick(postId, userId, e, isLiked);
    });

    // Reply click handler to toggle reply input field and replies
    repliesCounter.addEventListener('click', () => {
        const isVisible = repliesContainer.style.display === 'block';
        repliesContainer.style.display = isVisible ? 'none' : 'block';
    });

    // Submit reply handler
    replySubmitButton.addEventListener('click', () => {
        const replyMessage = replyInputField.value.trim();
        if (replyMessage) {
            handleReplyClick(postId, userId, replyMessage, replyInputField, repliesContainer);
        }
    });
}

// Function to render replies under the main message
function renderSingleReply(reply, parentElement) {
    const replyDiv = document.createElement('div');
    replyDiv.className = 'replyMessage';  // Add a class for styling the reply

    replyDiv.style.display = 'grid';
    replyDiv.style.gridTemplateColumns = '2fr 8fr';  // 2fr for avatar, 8fr for reply text
    replyDiv.style.alignItems = 'center';

    // Avatar for reply (2fr)
    const replyAvatar = document.createElement('img');
    replyAvatar.className = 'usersOnline';
    replyAvatar.src = reply.thumbnailUrl || `/images/logo_rst.png`;
    replyAvatar.style.gridColumn = '1';  // Place avatar in the first column

    // Reply text (8fr)
    const replyTextSpan = document.createElement('span');
    replyTextSpan.className = 'replyText';
    replyTextSpan.textContent = reply.message || 'No reply text.';
    replyTextSpan.style.gridColumn = '2';  // Place reply text in the second column

    replyDiv.appendChild(replyAvatar);  // 2fr
    replyDiv.appendChild(replyTextSpan);  // 8fr

    // Append the reply to the parentElement (repliesContainer)
    parentElement.appendChild(replyDiv);
}

// Function to render multiple replies under the message
function renderReplies(replies, parentElement) {
    replies.forEach(reply => {
        renderSingleReply(reply, parentElement);
    });
}

// Function to handle like clicks
function handleLikeClick(postId, userId, heartIcon, isLiked) {
    const tally = isLiked ? '--' : '++';  // Toggle like/unlike

    fetch(`/users/chat/like`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ userId, tally, postId })
    })
    .then(response => response.json())
    .then(data => {
        const newTally = data.likes;  // Get updated like count
        heartIcon.textContent = '‚ù§Ô∏è';  // Ensure heart icon remains
        heartIcon.nextElementSibling.textContent = newTally;  // Update the likes counter
        heartIcon.style.filter = isLiked ? 'grayscale(100%)' : 'grayscale(0%)';  // Toggle grayscale based on like status
        heartIcon.dataset.isLiked = isLiked ? "false" : "true";  // Update dataset
    })
    .catch(error => {
        console.error('Error updating like:', error);
    });
}

// Function to handle reply submission
function handleReplyClick(postId, userId, replyMessage, inputField, repliesContainer) {
    fetch(`/users/chat/reply`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ userId, postId, replyMessage })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Append the new reply to the replies container
            renderSingleReply(data.reply, repliesContainer);

            // Clear the input field
            inputField.value = '';

            // Update the replies counter
            const repliesCounter = document.querySelector(`#${postId}_actions .repliesCounter`);
            const currentCount = parseInt(repliesCounter.textContent) || 0;
            repliesCounter.textContent = `${currentCount + 1} üó®Ô∏è`;  // Increment the counter
        }
    })
    .catch(error => {
        console.error('Error posting reply:', error);
    });
}





      socket.on('chat message', (msg, roomyId) => {
          console.log(`chatting..${msg.user} room:${roomId}`)
      console.log(roomId == msg.roomId)
         if (roomId == msg.roomId){addMessage(msg, msg.user === 'You')};
          
          const messagesContainer = document.getElementById('messages');
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
      });
      
      document.getElementById('submitChat').addEventListener('click', sendMessage);
      document.getElementById('chatInput').addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
              sendMessage();
          }        
      });    
      
      
              function sendMessage() {
                  const input = document.getElementById('chatInput');
                  const message = input.value.trim();  
                     
                  console.log(`send messagefunction~ room: ${roomId}`)
                  if (message !== '') {
                      socket.emit('chat message', message, roomId);
                      input.value = '';
                  }
              }

      function changeRooms(newRoomId) {
  currentPage = 1; // Reset the page to 1 when changing rooms        
  roomId = newRoomId; // Update the roomId to the new room's ID
console.log(`changing rooms ${newRoomId}`)    
const messagesContainer = document.getElementById('chat');
console.log(`changing rooms ${messagesContainer}`)
  messagesContainer.innerHTML = ''; // Clear the current chat messages
  socket.emit('fetch messages', { roomId: roomId, page: currentPage, messagesPerPage: messagesPerPage });
}    

      document.addEventListener('click', (event) => {
  if (event.target.classList.contains('tab_section')) {
      const roomIdNum = event.target.id.split("_", 3);
      changeRooms(roomIdNum[2]); // Call changeRooms with the new room ID
   }
});

socket.on('user list', (users) => {
    const userList = document.getElementById('userList');
    userList.innerHTML = '';
    users.forEach((user) => {
        const div = document.createElement('div');
        div.className = '';
        div.dataset.userId = user.id;
        div.dataset.userName = user.name;
        div.dataset.userAvatar = user.avatarThumbnailUrl || '/images/logo_rst.png';

        const img = document.createElement('img');
        img.className = 'usersOnline';
        img.src = div.dataset.userAvatar;
        div.appendChild(img);

        // Add debug message
        const debugSpan = document.createElement('span');
        debugSpan.className = 'debugMessage';
        debugSpan.textContent = user.name; // Display user.firstName (or name in this case)
        div.appendChild(debugSpan);

        userList.appendChild(div);
    });
});

  
      socket.on('connect_error', (error) => {
          console.log('Connection Error:', error);
      });
  
      const chatToggle = document.getElementById('chatToggle');
      const chatWindow = document.getElementById('chat-window-basic');
      chatToggle.addEventListener('click', () => {
          const isOpen = chatWindow.style.transform === "translateX(-106%)";
          chatWindow.style.transform = isOpen ? "translateX(0%)" : "translateX(-106%)";
      });
  
      requestInitialMessages();
  });
</script>
