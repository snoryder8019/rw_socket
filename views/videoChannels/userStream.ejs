<!DOCTYPE html>
<html>
<head>
  <title>Video Stream</title>
  <style>
    #myVideo {
      width: clamp(250px, 250px, 250px);
    }
    .peers {

      background-color: blueviolet;
      display: grid;
      grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr ;
    }
    .peer{
        width: 100%;
    }
    .marquee {
      width: 100%;
   
      overflow: hidden;
      white-space: nowrap;
      box-sizing: border-box;
      padding: 10px 0;
    }
    .marquee span {
      display: inline-block;
      padding-left: 100%;
      animation: marquee 15s linear infinite;
    }
    @keyframes marquee {
      0% {
        transform: translate(0, 0);
      }
      100% {
        transform: translate(-100%, 0);
      }
    }
  </style>
  <script src="/socket.io/socket.io.js"></script>
</head>
<body>
  <% if (user.isAdmin) { %>
    <input id="roomName" name="name" type="text" placeholder="Room Name">
    <button onclick="createRoom()">Create Room</button>
  <% } %>

  <div class="p2pRoomsList">
    <% if (typeof rooms == 'object' && rooms) { %>
      <% rooms.forEach(room => { %>
        <div>
          <button button-data="<%= room._id %>" onclick="joinRoom('<%= room._id %>')">Join Room: <%= room.name || room._id %></button>
          <button button-data="<%= room._id %>" onclick="deleteRoom('<%= room._id %>')">Delete</button>
        </div>
      <% }) %>
    <% } %>
  </div>

  <div class="client_window">
    <button onclick="startCamera()">Start Camera</button>
    <button onclick="stopCamera()">Stop Camera</button>
    <div class="client_camera">
      <video id="myVideo" autoplay muted></video>
    </div>
  </div>

  <div class="peers"></div>
  <div class="P2Pcontrols"></div>

  <div class="marquee">
    <span id="marquee-text"></span>
  </div>

  <script>
    const socket = io('/videoStream');
    let localStream;
    let peers = {};

    async function getMedia() {
      try {
        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
        const videoElement = document.getElementById('myVideo');
        videoElement.srcObject = localStream;
      } catch (err) {
        console.error(err);
      }
    }

    function startCamera() {
      getMedia();
    }

    function stopCamera() {
      const tracks = localStream.getTracks();
      tracks.forEach(track => track.stop());
      localStream = null;
      document.getElementById('myVideo').srcObject = null;
    }

    async function createRoom() {
      const roomName = document.getElementById('roomName').value;
      try {
        const response = await fetch('/videoStream/createRoom', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ roomName })
        });
        const data = await response.json();
        console.log(`Room created with ID: ${data.roomId}`);
      } catch (error) {
        console.error('Failed to create room', error);
      }
    }

    function joinRoom(roomId) {
      socket.emit('joinRoom', roomId);
    }

    async function deleteRoom(roomId) {
      try {
        const response = await fetch('/videoStream/deleteRoom', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ roomId })
        });
        const data = await response.json();
        if (data.success) {
          console.log(`Room deleted: ${roomId}`);
          document.querySelector(`button[onclick="joinRoom('${roomId}')"]`).parentElement.remove();
        }
      } catch (error) {
        console.error('Failed to delete room', error);
      }
    }

    function setupPeerConnection(peerId) {
      const peerConnection = new RTCPeerConnection({
        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
      });

      peers[peerId] = peerConnection;

      localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

      peerConnection.onicecandidate = event => {
        if (event.candidate) {
          socket.emit('p2pCandidate', {
            peerId: peerId,
            candidate: event.candidate
          });
        }
      };

      peerConnection.ontrack = event => {
        const videoElement = document.createElement('video');
        videoElement.srcObject = event.streams[0];
        videoElement.autoplay = true;
        videoElement.className = "peer"
        document.querySelector('.peers').appendChild(videoElement);
      };

      return peerConnection;
    }

    function startCall(peerId) {
      const peerConnection = setupPeerConnection(peerId);

      peerConnection.createOffer()
        .then(offer => peerConnection.setLocalDescription(offer))
        .then(() => {
          socket.emit('p2pInit', {
            peerId: peerId,
            offer: peerConnection.localDescription
          });
        });
    }

    socket.on('p2pOffer', async (data) => {
      const peerConnection = setupPeerConnection(data.from);

      await peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));
      const answer = await peerConnection.createAnswer();
      await peerConnection.setLocalDescription(answer);
      socket.emit('p2pAnswer', {
        peerId: data.from,
        answer: peerConnection.localDescription
      });
    });

    socket.on('p2pAnswer', async (data) => {
      const peerConnection = peers[data.from];
      await peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
    });

    socket.on('p2pCandidate', async (data) => {
      const peerConnection = peers[data.from];
      await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
    });

    socket.on('updateRooms', (rooms) => {
      const roomsList = document.querySelector('.p2pRoomsList');
      roomsList.innerHTML = '';
      rooms.forEach(room => {
        const roomElement = document.createElement('div');
        roomElement.classList.add('room');
        roomElement.innerHTML = `
          <span>${room.name || room.id}</span>
          <span>Guests: ${room.guests}</span>
          <button onclick="joinRoom('${room.id}')">Join</button>
          <button onclick="deleteRoom('${room.id}')">Delete</button>
        `;
        roomsList.appendChild(roomElement);
      });
    });

    socket.on('roomState', (room) => {
      if (room.offer && !peers[room._id]) {
        startCall(room._id);
      }
      if (room.answer) {
        const peerConnection = peers[room._id];
        peerConnection.setRemoteDescription(new RTCSessionDescription(room.answer));
      }
      room.candidates.forEach(candidate => {
        const peerConnection = peers[room._id];
        peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
      });
    });

    socket.on('userJoined', (data) => {
      startCall(data.userId);
    });

    // Handle marquee updates
    socket.on('marquee', (message) => {
      const marqueeText = document.getElementById('marquee-text');
      marqueeText.innerHTML += ` ${message} `;
    });

  </script>
</body>
</html>
