<div class="index-container">
  <div class="container-scrollbox-x">
    <div class="client_window">
      <%if (user.isAdmin){%>
      <button class="videoControls start" onclick="startCamera()">Start Camera</button>
      <button class="videoControls stop" onclick="stopCamera()">Stop Camera</button>
     <%}%>
      <div>
        <h3>Join Us Live!!</h3>
        <% if (typeof rooms == 'object' && rooms) { %>
          <% rooms.forEach(room => { %>
            <div>
              <button class="videoControls" onclick="joinRoom('<%= room._id %>')">
                <h4><%= room.name || room._id %></h4>
              </button>
              <% if (user.isAdmin) { %>
                <button class="videoControls stop" onclick="deleteRoom('<%= room._id %>')">Delete</button>
              <% } %>
            </div>
          <% }) %>
        <% } %>
      </div>
      <div class="peers"></div>
    </div>
  </div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io('/videoStream');
  let localStream = null;
  let peers = {};

  async function startCamera() {
    if (!user.isAdmin) {
      console.warn('Only admin can start the camera');
      return;
    }

    try {
      // Admin starts broadcasting
      localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      console.log('Admin camera started');
      const videoElement = document.createElement('video');
      videoElement.id = 'myVideo';
      videoElement.srcObject = localStream;
      videoElement.autoplay = true;
      videoElement.muted = true; // Admin mutes their own video
      document.querySelector('.client_window').appendChild(videoElement);
    } catch (error) {
      console.error('Failed to start camera:', error);
    }
  }

  function stopCamera() {
    if (!user.isAdmin) {
      console.warn('Only admin can stop the camera');
      return;
    }

    if (localStream) {
      localStream.getTracks().forEach((track) => track.stop());
      localStream = null;
      const videoElement = document.getElementById('myVideo');
      if (videoElement) videoElement.remove();
      console.log('Admin camera stopped');
    }
  }

  function joinRoom(roomId) {
    console.log(`Joining room: ${roomId}`);
    socket.emit('joinRoom', roomId);
  }

  function setupPeerConnection(peerId) {
    const peerConnection = new RTCPeerConnection({
      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
    });

    peers[peerId] = peerConnection;

    // Admin adds tracks to the peer connection
    if (user.isAdmin && localStream) {
      localStream.getTracks().forEach((track) => peerConnection.addTrack(track, localStream));
    }

    peerConnection.onicecandidate = (event) => {
      if (event.candidate) {
        socket.emit('p2pCandidate', {
          peerId: peerId,
          candidate: event.candidate
        });
      }
    };

    peerConnection.ontrack = (event) => {
      console.log('Track received:', event.streams[0]);
      if (!document.getElementById(`peerVideo-${peerId}`)) {
        const videoElement = document.createElement('video');
        videoElement.id = `peerVideo-${peerId}`;
        videoElement.srcObject = event.streams[0];
        videoElement.autoplay = true;
        videoElement.className = 'peer';
        document.querySelector('.peers').appendChild(videoElement);
      }
    };

    return peerConnection;
  }

  function startCall(peerId) {
    if (!user.isAdmin) {
      console.warn('Only admin can start a call');
      return;
    }

    const peerConnection = setupPeerConnection(peerId);

    peerConnection.createOffer()
      .then((offer) => {
        console.log('Admin created offer:', offer);
        return peerConnection.setLocalDescription(offer);
      })
      .then(() => {
        console.log('Admin localDescription set:', peerConnection.localDescription);
        socket.emit('p2pInit', {
          peerId: peerId,
          offer: peerConnection.localDescription
        });
      })
      .catch((error) => {
        console.error('Error in startCall:', error);
      });
  }

  socket.on('p2pOffer', async (data) => {
    console.log('Viewer received offer:', data.offer);

    const peerConnection = setupPeerConnection(data.from);

    await peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));
    const answer = await peerConnection.createAnswer();
    await peerConnection.setLocalDescription(answer);
    socket.emit('p2pAnswer', {
      peerId: data.from,
      answer: peerConnection.localDescription
    });
  });

  socket.on('p2pAnswer', async (data) => {
    console.log('Admin received answer:', data.answer);
    const peerConnection = peers[data.from];
    if (peerConnection) {
      await peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
    }
  });

  socket.on('p2pCandidate', async (data) => {
    const peerConnection = peers[data.from];
    if (peerConnection) {
      await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
    }
  });

  socket.on('userJoined', (data) => {
    console.log('User joined:', data);
    if (user.isAdmin) {
      startCall(data.userId);
    }
  });
</script>
