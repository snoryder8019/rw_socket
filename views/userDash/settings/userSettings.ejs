<div id="settings">
  <button class="collapsible">Avatar Settings<span class="carrot">&#9654;</span></button>
  <div class="content" data-url="/users/avatars/returnUserAvatar"></div>

  <!--MYIMAGES BUTTON REMOVED-->
<!--MYIMAGES BUTTON REMOVED-->

  <button class="collapsible">Website Settings<span class="carrot">&#9654;</span></button>
  <div class="content" data-url="/users/userSettings/renderAddForm"></div>

  <button class="collapsible">Custom Settings<span class="carrot">&#9654;</span></button>
  <div class="content"><%- include('customSettings') %></div>

</div>


<script>
  document.addEventListener('DOMContentLoaded', () => {
    const collapsibles = document.querySelectorAll('.collapsible');

    collapsibles.forEach(collapsible => {
      collapsible.addEventListener('click', function () {
        this.classList.toggle('active');
        const content = this.nextElementSibling;
        const carrot = this.querySelector('.carrot');
        if (content.style.display === "block") {
          content.style.display = "none";
          carrot.classList.remove('rotate');
        } else {
          content.style.display = "block";
          carrot.classList.add('rotate');
          observeAndLoadContent(content);
        }
      });
    });

    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const content = entry.target;
          if (!content.dataset.loaded) {
            loadContent(content);
          }
        }
      });
    });

    function observeAndLoadContent(content) {
      if (content && content.getAttribute('data-url')) {
        observer.observe(content);
      }
    }

    async function loadContent(content) {
      const url = content.getAttribute('data-url');
      if (!url || url === 'false') {
        return; // Skip loading if data-url is false or not provided
      }
      try {
        const response = await fetch(url);
        const data = await response.text();
        content.innerHTML = data;
        content.dataset.loaded = true; // Mark as loaded
        observer.unobserve(content); // Stop observing once loaded
        initializeDynamicContent(content); // Initialize JS for newly loaded content
      } catch (error) {
        console.error(`Error loading content from ${url}:`, error);
        content.innerHTML = '<p>Error loading content</p>';
      }
    }

    // Function to initialize event listeners for dynamically loaded content
    function initializeDynamicContent(parent) {
      const newCollapsibles = parent.querySelectorAll('.collapsible');

      newCollapsibles.forEach(collapsible => {
        collapsible.addEventListener('click', function () {
          this.classList.toggle('active');
          const content = this.nextElementSibling;
          const carrot = this.querySelector('.carrot');
          if (content.style.display === "block") {
            content.style.display = "none";
            carrot.classList.remove('rotate');
          } else {
            content.style.display = "block";
            carrot.classList.add('rotate');
            observeAndLoadContent(content);
          }
        });
      });
    }
  });
</script>
