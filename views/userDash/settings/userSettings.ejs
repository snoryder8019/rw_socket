<div id="settings">
    <button class="collapsible">Avatar Settings<span class="carrot">&#9654;</span></button>
    <div class="content" ><%- include('images') %></div>

    <button class="collapsible">Website Settings<span class="carrot">&#9654;</span></button>
    <div class="content" ><%- include('websiteSettings') %></div>

    <button class="collapsible">Custom Settings<span class="carrot">&#9654;</span></button>
    <div class="content" ><%- include('customSettings') %></div>

    <!--OBSERVER ON CLICK FOR LIGHTER LOAD-->
    <button class="collapsible">TRYCATCH<span class="carrot">&#9654;</span></button>
    <div class="content" data-url="/admin/doSomething" ></div>

</div>

<style>
    .collapsible {
        background-color: #f9f9f9;
        color: #333;
        cursor: pointer;
        padding: 10px;
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        font-size: 18px;
        transition: background-color 0.3s;
    }

    .active, .collapsible:hover {
        background-color: #ccc;
    }

    .content {
        padding: 0 18px;
        display: none;
        overflow: visible;
        background-color: #f1f1f1;
    }

    .carrot {
        float: right;
        transition: transform 0.3s;
    }

    .rotate {
        transform: rotate(90deg);
    }
</style>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const collapsibles = document.getElementsByClassName('collapsible');

        for (let i = 0; i < collapsibles.length; i++) {
            collapsibles[i].addEventListener('click', function () {
                this.classList.toggle('active');
                const content = this.nextElementSibling;
                const carrot = this.querySelector('.carrot');
                if (content.style.display === "block") {
                    content.style.display = "none";
                    carrot.classList.remove('rotate');
                } else {
                    content.style.display = "block";
                    carrot.classList.add('rotate');
                    observeAndLoadContent(content);
                }
            });
        }

        const observer = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const content = entry.target;
                    if (!content.dataset.loaded) {
                        loadContent(content);
                    }
                }
            });
        });

        function observeAndLoadContent(content) {
            if (content && content.getAttribute('data-url')) {
                observer.observe(content);
            }
        }

        async function loadContent(content) {
            const url = content.getAttribute('data-url');
            if (!url || url === 'false') {
                return; // Skip loading if data-url is false or not provided
            }
            try {
                const response = await fetch(url);
                const data = await response.text();
                content.innerHTML = data;
                content.dataset.loaded = true; // Mark as loaded
                observer.unobserve(content); // Stop observing once loaded
            } catch (error) {
                console.error(`Error loading content from ${url}:`, error);
                content.innerHTML = '<p>Error loading content</p>';
            }
        }
    });
</script>

