#!/usr/bin/env node

const { app } = require('../app');
const debug = require('debug')('yourapp:server');
const http = require('http');
const { setupSocketIO } = require('../plugins/socket_io/setup');
const socketIo = require('socket.io');


const port = normalizePort(process.env.PORT || '3000');


app.set('port', port);

const server = http.createServer(app);

const io = socketIo(server);

// Make io accessible throughout the app
app.set('io', io);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

setupSocketIO(server); // Make sure this initializes the Socket.IO namespaces

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
